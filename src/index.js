import React, {Component} from 'react'
require('../css/default.scss')

function* idsGen () {
  let i = 0
  while(true) {
    i++
    yield i
  }
}
const idGen = idsGen()

export const Hermes = {
  mountedInstance: null,
  message: (content, data) => {
    if (!data) {
      data = content
    } else {
      data.body = content
    }
    if (global.Hermes.mountedInstance) {
      if (typeof data === 'string') {
        data = {
          body: data,
          duration: 10
        }
      }
      global.Hermes.mountedInstance.addMessage(data)
    }
  },
  updateMessage: (data) => {
    if (global.Hermes.mountedInstance) {
      global.Hermes.mountedInstance.updateMessage(data.id, data)
    }
  },
  closeMessage (messageId) {
    if (global.Hermes.mountedInstance) {
      global.Hermes.mountedInstance.removeMessage(messageId)
    }
  },
  warn (message, options = {}) {
    options.type = 'warn'
    global.Hermes.message(message, options)
  },
  warning (message, options = {}) {
    options.type = 'warn'
    global.Hermes.message(message, options)
  },
  error (message, options = {}) {
    options.type = 'error'
    global.Hermes.message(message, options)
  },
  fail (message, options = {}) {
    options.type = 'error'
    global.Hermes.message(message, options)
  },
  info (message, options = {}) {
    options.type = 'info'
    global.Hermes.message(message, options)
  },
  success (message, options = {}) {
    options.type = 'success'
    global.Hermes.message(message, options)
  }
}

global.Hermes = Hermes

export class HermesComponent extends React.Component {

  constructor (props) {
    super(props)
    this.state = {
      messages: [],
      originalTitle: document.title
    }

    this.audio = this.createAudio(this.props)
  }

  createAudio (props) {
    const base64string = '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

    return new Audio(typeof props.playAudio !== 'object'
      ? "data:audio/mp3;base64," + base64string
      : props.playAudio)
  }

  setMessageDuration (data) {
    let duration = data.duration || (data.locked ? null : this.props.defaultDuration)
    if (duration) {
      let s = Math.max(1, duration) * 1000
      data.to = setTimeout(_ => {
        this.removeMessage(data)
      }, s)
    }
    return data
  }

  updateTitleCounter () {
    if (this.props.updateTitleCounter) {
      let counter = this.state.messages.filter(_=>_).length
      if (document.title) {
        if (counter) {
          document.title = '(' + counter + ') ' + this.state.originalTitle
        } else {
          document.title = this.state.originalTitle
        }
      }
    }
  }

  addMessage (data) {
    if (!Object.isExtensible(data)) {
      // this is probably a react component
      data = {
        body: data
      }
    }
    data.id = data.id || idGen.next().value
    if (data.animate !== false && this.props.animate) {
      data.animate = true
    }
    let list = this.state.messages
    list[data.id] = data

    data = this.setMessageDuration(data)
    // if (duration) {
    //   let s = duration * 1000
    //   data.to = setTimeout(_ => {
    //     this.removeMessage(data)
    //   }, s)
    // }

    this.setState({
      messages: list
    }, _ => {
      this.updateTitleCounter()
      if (data.playAudio) {
        let audio = this.createAudio(data.playAudio)
        audio.play()
      } else {
        if (this.props.playAudio && data.playAudio !== false) {
          this.audio.play()
        }
      }
      data = this.setMessageDuration(data)
      if (data.onShow) {
        data.onShow(data)
      }
    })
  }

  updateMessage (id, data) {
    let list = this.state.messages
    if (id && list[id]) {
      let message = list[id]
      if (data.animate !== false && this.props.animate) {
        data.animate = true
      }
      message.body = data.body
      message.type = data.type
      message.animate = data.animate
      if (data.duration) {
        if (message.to) {
          clearTimeout(message.to)
        }
        message = this.setMessageDuration(data)
      }
      list[id] = message
      this.setState({
        messages: list
      })
    } else {
      data.id = id || data.id || idGen.next().value
      this.addMessage(data)
    }
  }

  removeMessageElement (data) {
    let id = data && data.id ? data.id : data
    let list = this.state.messages
    delete list[id]
    this.setState({
      messages: list
    }, _ => {
      this.updateTitleCounter()
      if (data.to) {
        clearTimeout(data.to)
      }
    })
  }

  removeMessage (data) {
    let id = data && data.id ? data.id : data
    let list = this.state.messages
    if (list[id]) {
      list[id].removing = true
      this.setState({
        messages: list
      }, _ => {
        setTimeout(_ => {
          this.removeMessageElement(data)
        }, 1000)
      })
    }
  }

  componentDidMount () {
    global.Hermes.mountedInstance = this
  }

  render () {
    let notifs = Object.keys(this.state.messages)
    return <div id='hermes-container'>
      {
        notifs.map((messageId, i) => {
          let message = this.state.messages[messageId]
          let order = (notifs.length - i)
          return message
            ? <div
              key={message.id}
              className={`hermes-notif ${message.animate ? 'animate' : ''} hermes-${message.type || 'default'} ${(message.removing ? 'removing' : '')}`}
              style={message.removing ? { order } : {
                animationDelay: (i * 0.1) + 's',
                order
              }}>
              {message.body}
              {
                message.locked && message.id
                  ? null
                  : <span
                    className='hermes-remove-message'
                    onClick={event => this.removeMessage(message)}>x</span>
              }
            </div>
            : null
        })
      }
    </div>
  }
}

export default global.Hermes

// These global methods below, are o help you in case you was already using
// Bert's show[info/error/warning/success]
export const showInfo = (message) => {
  window.Hermes.updateMessage({
    body: message,
    duration: 10,
    type: 'info'
  })
}

export const showError = (message) => {
  window.Hermes.updateMessage({
    body: message,
    duration: 15,
    id: message,
    type: 'error'
  })
}

export const showWarning = (message) => {
  window.Hermes.updateMessage({
    body: message,
    duration: 10,
    type: 'warn'
  })
}

export const showSuccess = (message) => {
  window.Hermes.updateMessage({
    body: message,
    duration: 4,
    id: 'success',
    type: 'default'
  })
}


/*  SAMPLES
window.Hermes.message({body: 'Outra mensagem', type: 'error'})
window.Hermes.message({body: 'Uma mensagem aqui'})
window.Hermes.message({body: 'Also this', type: 'info', duration: 3})
window.Hermes.message({body: 'Oh my gosh!', type: 'warn'})
window.Hermes.message({body: 'Mais uma mensavem inútil aqui :)'})
window.Hermes.updateMessage({body: 'Saving...', locked: true, id: 'savingMSG'})
setTimeout(function () {
  window.Hermes.updateMessage({body: 'Saved', locked: true, id: 'savingMSG', duration: 3})
}, 6000)
*/
